#!/bin/bash
# Install Wordpress on Ubuntu server by Cecep-91

# Functions
ressultlog=/var/log/wordpress.log
errorlog=/var/log/wordpress_error.log

check_error() {
if [ $? -ne 0 ]
then
	echo "An error occurred, check the $errorlog file"
	sleep 0.5
else
	r=0
fi
}

# Does user run it with root privilege
ls /root &> /dev/null
if [ $? -ne 0 ]
then
	echo "You do not have root privileges, run it with sudo or root account"
	exit 999
fi

# Let user know program is starting
echo "Starting the program ..."
sleep 0.5

# Check the internet connection
echo "Checking internet connection ..."
ping -c 3 8.8.8.8 &>> /dev/null
if [ $? -ne 0 ]
then
	echo "No internet connection, try again later."
	exit 1
fi

r=1
while [ $r -ne 0 ]
do
	apt install mariadb-server -y 1>$ressultlog 2>>$errorlog
	check_error
done
echo "200 OK"

# Gaining mySQL root password
access_sql=0
while [ $access_sql != 1 ]
do 
	read -p "Enter your Maria-DB's root password (Leave it blank if you haven't configured it before):" root_pass
	sleep 0.5

	mysql --user="root" --password="$root_pass" --execute="SHOW DATABASES;" &>> /dev/null
	if [ $? -ne 0 ]
	then
		echo "Can't access Maria-DB server, check again your password."
		sleep 0.5
		exit 2
	else
		echo "Maria-DB successfully accessed."
		sleep 0.5
		access_sql=1
	fi
done

# Make database for Maria-DB user
dupl_db=1
while [ ${#db_name} -eq 0 ] && [ ${dupl_db}=1 ]
do
	read -p "Database name for Wordpress:" db_name

	# Check duplicate database name
	if [ ${#db_name} -ne 0 ]
	then
	mysql --user="root" --password="$root_pass" --execute="USE $db_name;" &>> /dev/null
	else
	mysql --user="root" --password="${root_pass}notapassword" --execute="USE ${db_name}notadatabase;" &>> /dev/null
	fi

	if [ $? -ne 1 ]
	then
		echo "There is already database named '$db_name', enter something else."
		db_name=""
	else
		dupl_db=0
	fi
done

# Make username for Maria-DB user
dupl_usr=1
while [ ${#username_db} -eq 0 ] && [ ${dupl_usr}=1 ]
do
	read -p "Username Maria-DB for Wordpress:" username_db

	# Check duplicate username
	result=$(mysql --user="root" --password="$root_pass" --execute="SELECT User FROM mysql.user WHERE User='$username_db';" 2>&1)

	if [[ "$result" == *"User"* ]]
	then
		echo "There is already username named '$username_db', enter something else."
		username_db=""
	else
		dupl_usr=0
	fi
done

# Make password for Maria-DB user
while [ $pass1 != $pass2 ]
do 
	read -p "Maria-DB's password for user '$username_db':" -s pass1
	echo ""
	read -p "Confirm your password:" -s pass2

	if [ $pass1 != $pass2 ]
	then
		echo "Your password is not matched. Try again ..."
	fi
	echo ""
	sleep 0.5
done

# Update the Ubuntu server
r=1
while [ $r -ne 0 ]
do
	echo "Updating machine ..."

	apt update 1>$ressultlog 2>>$errorlog
	check_error
done

# Getting the required packages
r=1
while [ $r -ne 0 ]
do
	echo "Getting the requiered packages ..."

	apt install apache2 mariadb-server php php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap libapache2-mod-php php-mysql wget unzip -y 1>$ressultlog 2>>$errorlog
	check_error
done

echo "Configuring LAMP ..."

# Setting Apace2
systemctl start apache2 &>> /dev/null
systemctl enable apache2 &>> /dev/null

# Configuring Maria-DB
mysql --user="root" --password="$root_pass" --execute="CREATE DATABASE $db_name;" &>> /dev/null
mysql --user="root" --password="$root_pass" --execute="CREATE USER '$username_db'@'localhost' IDENTIFIED BY '$pass1';" &>> /dev/null
mysql --user="root" --password="$root_pass" --execute="GRANT ALL PRIVILEGES ON $db_name.* TO '$username_db'@'localhost';" &>> /dev/null
mysql --user="root" --password="$root_pass" --execute="FLUSH PRIVILEGES;" &>> /dev/null

# Downloading Wordpress
wp_dir="/var/www/html/wordpress/"

echo "Downloading Wordpress ..."
if [ -f ${wp_dir}../latest.tar.gz ]
then
	echo "Removing old file ..."
	rm ${wp_dir}../latest.tar.gz
fi

if [ -d /var/www/html/wordpress/ ]
then
	echo "Existing wordpress file found, making the backup of old wordpress file"
	rm -R ${wp_dir}../old_wordpress/ &>> /dev/null
	cp -R $wp_dir ${wp_dir}../old_wordpress/ 
	rm -R $wp_dir
fi

wget -q --show-progress -P /var/www/html http://wordpress.org/latest.tar.gz

# Getting ready Wordpress
echo "Configuring Wordpress ..."
tar -xvzf /var/www/html/latest.tar.gz -C /var/www/html/ >> /dev/null
mv ${wp_dir}wp-config-sample.php ${wp_dir}wp-config.php

# Configuring Wordpress
dbline=$(grep -n "DB_NAME" ${wp_dir}wp-config.php | cut -d: -f1)
usline=$(grep -n "DB_USER" ${wp_dir}wp-config.php | cut -d: -f1)
pwline=$(grep -n "DB_PASSWORD" ${wp_dir}wp-config.php | cut -d: -f1)

awk -v new_db="$db_name" -v line="$dbline" 'NR == line {print "define( '\''DB_NAME'\'', '\''" new_db "'\'' );"; next} 1' "${wp_dir}wp-config.php" > tmpfile && mv tmpfile "${wp_dir}wp-config.php"
awk -v new_us="$username_db" -v line="$usline" 'NR == line {print "define( '\''DB_USER'\'', '\''" new_us "'\'' );"; next} 1' "${wp_dir}wp-config.php" > tmpfile && mv tmpfile "${wp_dir}wp-config.php"
awk -v new_pw="$pass1" -v line="$pwline" 'NR == line {print "define( '\''DB_PASSWORD'\'', '\''" new_pw "'\'' );"; next} 1' "${wp_dir}wp-config.php" > tmpfile && mv tmpfile "${wp_dir}wp-config.php"

chown -R www-data:www-data ${wp_dir}
chmod -R 775 ${wp_dir}

# Add Virtual Host file for Wordpress
wp_vh="/etc/apache2/sites-available/wordpress.conf"
dupl_vh=1
alt_vh=1
while [ $dupl_vh -eq 1 ]
do
	wp_vh="/etc/apache2/sites-available/wordpress_${alt_vh}.conf"
	if [ -f $wp_vh ]
	then
		alt_vh=$(($alt_vh + 1))
	else
		dupl_vh=0
	fi
done
echo "# Virtual Host for Wordpress
<VirtualHost *:80>
	ServerAdmin admin@wp.ubuntu
	DocumentRoot ${wp_dir}
	ServerName wp.ubuntu

	<Directory ${wp_dir}>
		Options FollowSymLinks
		AllowOverride All
		Require all granted
	</Directory>

	ErrorLog ${APACHE_LOG_DIR}/wordpress_error.log
	CustomLog ${APACHE_LOG_DIR}/wordpress.log combined
</VirtualHost>
" >>${wp_vh}

# Finishing up setup

for conf in /etc/apache2/sites-available/*
do
        conf=$(basename "$conf")
        echo "Disabling $conf"
        a2dissite $conf
done

wp_vh_basename=$(basename "$wp_vh")
echo "Enabling $wp_vh_basename"
a2ensite ${wp_vh_basename} >> /dev/null
a2enmod rewrite >> /dev/null

systemctl restart apache2 >> /dev/null
systemctl status apache2 >> /dev/null

# Let User check the webserver
echo "Installation finished. Visit the following ip in your web browser: "
hostname --all-ip-addresses
