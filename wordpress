#!/bin/bash
# Install WordPress on Ubuntu server by cecep-91
# edited lol
# Functions I need:
# Check root privileges
check_root() {
  if [ "$(whoami)" != "root" ]; then
    echo "You do not have root privileges, run it with sudo or as root."
    exit 1
  fi
}

# Check error function
check_error() {
if [ $? -ne 0 ]
then
	echo "An error occurred, check the $errorlog file"
	mysql --user="root" --password="$root_pass" --execute="DROP DATABASE $db_name;" &>> /dev/null
	mysql --user="root" --password="$root_pass" --execute="DROP USER '$username_db'@'localhost';" &>> /dev/null
	exit 2
fi
}

# Check internet connection
check_internet() {
  echo "Checking internet connection..."
  if ! ping -c 3 8.8.8.8 &>> /dev/null; then
    echo "No internet connection, try again later."
    exit 2
  fi
  
  echo "Installing pre-required packages..."
  apt install mariadb-server &>> /dev/null
  check_error 
}

# Install required packages
install_packages() {
  local packages="mariadb-server apache2 php php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap libapache2-mod-php php-mysql wget unzip"
  
  echo "Installing $packages..."
  apt install $packages -y 1>> "$resultlog" 2>> "$errorlog"
  check_error
}

# Set up LAMP stack
setup_lamp() {
  echo "Configuring LAMP..."
  
  # Start Apache
  systemctl start apache2 >> /dev/null
  systemctl enable apache2 >> /dev/null
  
  # Configure MariaDB
  mysql --user="root" --password="$root_pass" --execute="CREATE DATABASE $db_name;" &>> /dev/null
  mysql --user="root" --password="$root_pass" --execute="CREATE USER '$username_db'@'localhost' IDENTIFIED BY '$pass1';" &>> /dev/null
  mysql --user="root" --password="$root_pass" --execute="GRANT ALL PRIVILEGES ON $db_name.* TO '$username_db'@'localhost';" &>> /dev/null
  mysql --user="root" --password="$root_pass" --execute="FLUSH PRIVILEGES;" &>> /dev/null
}

# Download and configure WordPress
download_and_configure_wordpress() {
  echo "Downloading WordPress..."
  # Check old wordpress tar.gz
  if [ -f /var/www/html/${today}/latest.tar.gz ]; then
    echo "Removing old file..."
    rm /var/www/html/${today}/latest.tar.gz
  fi
  
  if [ -d "$wp_dir" ]; then
    echo "Existing WordPress files found, making a backup..."
    rm -R "${wp_dir}../old_wordpress/" &>> /dev/null
    mv "$wp_dir" "${wp_dir}../old_wordpress/"
  fi
  
  wget -q --show-progress -P /var/www/html/${today} http://wordpress.org/latest.tar.gz
  
  echo "Configuring WordPress..."
  tar -xvzf /var/www/html/${today}/latest.tar.gz -C /var/www/html/${today}/ >> /dev/null
  mv "${wp_dir}wp-config-sample.php" "${wp_dir}wp-config.php"
  
  # Configure WordPress database settings
  dbline=$(grep -n "DB_NAME" ${wp_dir}wp-config.php | cut -d: -f1)
  usline=$(grep -n "DB_USER" ${wp_dir}wp-config.php | cut -d: -f1)
  pwline=$(grep -n "DB_PASSWORD" ${wp_dir}wp-config.php | cut -d: -f1)

  awk -v new_db="$db_name" -v line="$dbline" 'NR == line {print "define( '\''DB_NAME'\'', '\''" new_db "'\'' );"; next} 1' "${wp_dir}wp-config.php" > tmpfile && mv tmpfile "${wp_dir}wp-config.php"
  awk -v new_us="$username_db" -v line="$usline" 'NR == line {print "define( '\''DB_USER'\'', '\''" new_us "'\'' );"; next} 1' "${wp_dir}wp-config.php" > tmpfile && mv tmpfile "${wp_dir}wp-config.php"
  awk -v new_pw="$pass1" -v line="$pwline" 'NR == line {print "define( '\''DB_PASSWORD'\'', '\''" new_pw "'\'' );"; next} 1' "${wp_dir}wp-config.php" > tmpfile && mv tmpfile "${wp_dir}wp-config.php"
  
  chown -R www-data:www-data "$wp_dir"
  chmod -R 775 "$wp_dir"
}

# Create Virtual Host for WordPress
create_virtual_host() {
  local wp_vh="/etc/apache2/sites-available/wordpress.conf"
  local alt_vh=1
  
  while [ -f "$wp_vh" ]; do
    wp_vh="/etc/apache2/sites-available/wordpress_${alt_vh}.conf"
    alt_vh=$((alt_vh + 1))
  done
  
  # Add Virtual Host configuration
  echo "# Virtual Host for WordPress
<VirtualHost *:80>
	ServerAdmin admin@wp.ubuntu
	DocumentRoot $wp_dir
	ServerName wp.ubuntu

	<Directory $wp_dir>
		Options FollowSymLinks
		AllowOverride All
		Require all granted
	</Directory>

	ErrorLog \${APACHE_LOG_DIR}/wordpress_error.log
	CustomLog \${APACHE_LOG_DIR}/wordpress.log combined
</VirtualHost>
" >> "$wp_vh"
  
  # Disable other sites and enable WordPress site
  for conf in /etc/apache2/sites-available/*; do
    conf=$(basename "$conf")
    echo "Disabling $conf"
    a2dissite "$conf"
    sleep 0.5
  done
  
  wp_vh_basename=$(basename "$wp_vh")
  echo "Enabling $wp_vh_basename"
  a2ensite "$wp_vh_basename" >> /dev/null
  a2enmod rewrite >> /dev/null
  
  systemctl restart apache2 >> /dev/null
  systemctl status apache2 >> /dev/null
}

# Let's run the script
resultlog="/var/log/wordpress.log"
errorlog="/var/log/wordpress_error.log"

check_root
echo "Starting the program..."
sleep 0.5
check_internet

# Set up directory
today=$(date +'%Y%m%d')
mkdir -p /var/www/html/${today}
wp_dir="/var/www/html/${today}/wordpress/"


# Actually, the following code is messy without being in a function, but what can I do, I need global variable
# Gaining mySQL root password
while true; do 
	read -p "Enter your Maria-DB's root password (Leave it blank if you haven't configured it before): " root_pass
	
	mysql --user="root" --password="$root_pass" --execute="SHOW DATABASES;" &>> /dev/null
	if [ $? -ne 0 ]; then
		echo "Can't access Maria-DB server, check again your password."
		exit 4
	else
		echo "Maria-DB successfully accessed."
		sleep 0.5
		break
	fi
done


# Make database for Maria-DB user
while true; do
	read -p "Database name for Wordpress: " db_name

	# Check null input
	if [ ${#db_name} -eq 0 ]; then
		continue
	fi

	# Check duplicated database
	mysql --user="root" --password="$root_pass" --execute="USE $db_name;" &>> /dev/null
	if [ $? -eq 0 ]; then
		echo "There is already database named '$db_name', enter something else."
	else
		break
	fi
done


# Make username for Maria-DB user
while true; do
	read -p "Username Maria-DB for Wordpress: " username_db
	
	# Check null input
	if [ ${#username_db} -eq 0 ]; then
		continue
	else
	result=$(mysql --user="root" --password="$root_pass" --execute="SELECT User FROM mysql.user WHERE User='$username_db';" 2>&1)
	fi
	
	# Check duplicated user
	if [[ "$result" == *"User"* ]]; then
		echo "There is already username named '$username_db', enter something else."
	else
		break
	fi
done

# Make password for Maria-DB user
while [ $pass1 != $pass2 ]; do 
	read -p "Maria-DB's password for user '$username_db': " -s pass1
  echo ""
	read -p "Confirm your password: " -s pass2
	echo ""

	if [ $pass1 != $pass2 ]; then
		echo "Your password is not matched. Try again ..."
	fi
	sleep 0.5
done


# Update the Ubuntu server
while true; do
	echo "Updating machine ..."
	apt update 1>$resultlog 2>>$errorlog
	check_error
	break
done

install_packages
setup_lamp
download_and_configure_wordpress
create_virtual_host

# Let the user check the webserver
echo "Installation finished. Visit the following IP in your web browser:"
hostname --all-ip-addresses
